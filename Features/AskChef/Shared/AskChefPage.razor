@page "/ask-chef"
@using Ganss.Xss
@using Markdig
@using MediatR
@using Microsoft.SemanticKernel
@using Radzen
@using Radzen.Blazor
@using Void.Chef.Features.AskChef.Queries
@inject ISender Sender
@inject IHtmlSanitizer HtmlSanitizer

<h1>Ask Chef</h1>

<RadzenStack Style="overflow-y: auto; height: 100%">
    <RadzenStack Style="overflow-y: auto; height: 100%">
        <div style="overflow-y: auto; height: 100%">
            @foreach (var message in _history)
            {
                <RadzenStack
                    Orientation="Orientation.Horizontal"
                    JustifyContent="@(message.SentByUser ? JustifyContent.End : JustifyContent.Start)">
                    <div class="msg-box @(message.SentByUser? "user-msg-box":"chef-msg-box")">
                        <span>@ConvertMarkdownStringToHtml(message.Content)</span>
                    </div>
                </RadzenStack>
            }
            @if (cumulatedResponse.Length > 0)
            {
                <RadzenStack
                    Orientation="Orientation.Horizontal"
                    JustifyContent="JustifyContent.Start">
                    <div class="msg-box chef-msg-box">
                        <span>@ConvertMarkdownStringToHtml(cumulatedResponse)</span>
                    </div>
                </RadzenStack>
            }
        </div>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        <RadzenTextArea 
            Style="width: 100%" 
            @bind-Value="_question"
            ></RadzenTextArea>
        <div>
            <RadzenButton
                Text="Send"
                Click="@OnSendButtonClick"
            ></RadzenButton>
        </div>
    </RadzenStack>
</RadzenStack>

@code {

    private IList<ChefChatMessage> _history = new List<ChefChatMessage>();
    private string? _question;

    private string cumulatedResponse = string.Empty;

    private async Task OnSendButtonClick()
    {
        if (!string.IsNullOrWhiteSpace(_question))
        {
            await SendStreamingMessageToChef();
        }
    }

    private async Task SendMessageToChef()
    {
        _history.Add(new() {Content = _question, SentByUser = true});
        _question = null;
        var answer = await Sender.Send(new GetAnswerQuery()
        {
            History = _history
        });
            
        _history.Add(answer);
    }

    private async Task SendStreamingMessageToChef()
    {
        _history.Add(new() {Content = _question, SentByUser = true});
        _question = null;
        cumulatedResponse = "";
        await foreach (var chunk in await Sender.Send(new GetStreamAnswerQuery()
                       {
                           History = _history
                       }))
        {
            cumulatedResponse += chunk;
            
            StateHasChanged();
        }
        
        _history.Add(new(){Content = cumulatedResponse, SentByUser = false});
        cumulatedResponse = "";
        StateHasChanged();

    }

    private MarkupString ConvertMarkdownStringToHtml(string value)
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            var html = Markdig.Markdown.ToHtml(value, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());

            var sanitizedHtml = HtmlSanitizer.Sanitize(html);

            return new MarkupString(sanitizedHtml);
        }

        return new MarkupString();
    }
}